using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;

namespace UristBot.UpdateHandlers
{
    public static class CallbackQueryHandler
    {
        [Obsolete]
        public static async Task Handle(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
        {
            var callbackQuery = update.CallbackQuery;
            var message = callbackQuery?.Message;
            var user = callbackQuery?.From;
            var chat = callbackQuery?.Message?.Chat;

            if (user != null)
            {
                BotState.UserLastButton[user.Id] = callbackQuery.Data;
            }

            if (message?.Text != null || user != null || chat != null)
            {
                Console.WriteLine($"{user?.FirstName} ({user.Id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É: {callbackQuery?.Data}");
            }

            switch (callbackQuery?.Data)
            {
                case "mainmenu":
                    {
                        InlineKeyboardMarkup replyMarkup = new(KeyBoardCreator.MainMenu());
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", replyMarkup: replyMarkup);
                        return;
                    };
                case "kodex":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É '–ö–æ–¥–µ–∫—Å—ã'", replyMarkup: new(KeyBoardCreator.Kodex()));
                        return;
                    }
                case "tk_rf":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏", replyMarkup: new(KeyBoardCreator.TkRf()));
                        return;
                    }
                case "yk_rf":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏", replyMarkup: new(KeyBoardCreator.YkRf()));
                        return;
                    }
                case "sk_rf":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏", replyMarkup: new(KeyBoardCreator.SkRf()));
                        return;
                    }
                case "gk_rf":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏", replyMarkup: new(KeyBoardCreator.GkRf()));
                        return;
                    }
                case "sait_gk":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'", replyMarkup: new(KeyBoardCreator.SaitGk()));
                        return;
                    }
                case "koap_rf":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏", replyMarkup: new(KeyBoardCreator.KoapRf()));
                        return;
                    }
                case "ypk_rf":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏", replyMarkup: new(KeyBoardCreator.YpkRf()));
                        return;
                    }
                case "yik_rf":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏", replyMarkup: new(KeyBoardCreator.YikRf()));
                        return;
                    }
                case "gpk_rf":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏", replyMarkup: new(KeyBoardCreator.GpkRf()));
                        return;
                    }
                case "kas_rf":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏", replyMarkup: new(KeyBoardCreator.KasRf()));
                        return;
                    }
                case "apk_rf":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏", replyMarkup: new(KeyBoardCreator.ApkRf()));
                        return;
                    }
                case "fkz":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É '–§–ö–ó'", replyMarkup: new(KeyBoardCreator.Fkz()));
                        return;
                    }
                case "fz":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É '–§–ó'", replyMarkup: new(KeyBoardCreator.Fz()));
                        return;
                    }
                case "fz_3":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", replyMarkup: new(KeyBoardCreator.Fz_3()));
                        return;
                    }
                case "courts":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥—É '–°—É–¥—ã'", replyMarkup: new(KeyBoardCreator.Courts()));
                        return;
                    }
                case "plenums":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É '–ü–ª–µ–Ω—É–º—ã'", replyMarkup: new(KeyBoardCreator.Plenums()));
                        return;
                    }
                case "orders":
                    {
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, $"–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É '–ü—Ä–∏–∫–∞–∑—ã'", replyMarkup: new(KeyBoardCreator.Orders()));
                        return;
                    }
                case "auth":
                    {
                        await botClient.DeleteMessageAsync(chatId: message.Chat.Id, messageId: message.MessageId, cancellationToken: cancellationToken);
                        ReplyKeyboardMarkup authorization = new(new[] { KeyboardButton.WithRequestContact("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º!") }) { ResizeKeyboard = true, OneTimeKeyboard = true };
                        await botClient.SendTextMessageAsync(chat.Id, $"–Ø –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º, –ø–æ–∫–∞ –Ω–µ —É–∑–Ω–∞—é –∫—Ç–æ –∏—Ö –ø—Ä–æ—Å–∏—Ç.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–Ω–∏–∑—É. –ï—Å–ª–∏ —É –≤–∞—Å –æ–Ω–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üéõ", replyMarkup: authorization);
                        break;
                    }
                case "exit":
                    {
                        InlineKeyboardMarkup firstmenu = InlineKeyboardButton.WithCallbackData(text: "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callbackData: "auth");
                        await botClient.EditMessageTextAsync(chat.Id, messageId: message.MessageId, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!", replyMarkup: firstmenu);
                        return;
                    }
            }
        }
    }
}